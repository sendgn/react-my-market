'use strict';

/* Упражнение 1 */
let a = '100px';
let b = '323px';
let result = parseInt(a) + parseInt(b);
console.log(result);


/* Упражнение 2 */
console.log(Math.max(10, -45, 102, 36, 12, 0, -1));


/* Упражнение 3 */
let c = 123.3399; // Округлить до 123
// Решение
console.log(Math.round(c));

let d = 0.111; // Округлить до 1
// Решение
console.log(Math.ceil(d));

let e = 45.333333; // Округлить до 45.3
// Решение
console.log(+e.toFixed(1));

let f = 3; // Возвести в степень 5 (должно быть 243)
// Решение
console.log(f ** 5);

let g = 400000000000000; // Записать в сокращенном виде
// Решение
console.log(4e14);

let h = '1' != 1; // Поправить условие, чтобы результат был true (значения изменять нельзя, только оператор)
// Решение
h = '1' !== 1;
console.log(h);


/* Упражнение 4 */
console.log(0.1 + 0.2 === 0.3); // Вернёт false, почему?
// Потому что 0.1 + 0.2 == 0.30000000000000004
// Числа в памяти хранятся в двоичном виде: 
// 0.1 в десятичной системе счисления - это 0.000(1100) в двоичной, т.е. бесконечная дробь.
// 0.2 в десятичной - это 0.00(1100) в двоичной, тоже бесконечная дробь.
// Память устройства ограничена и не может вмещать в себя что-то бесконечное, поэтому 0.1 и 0.2 нельзя представить в виде точных значений, будут взяты значения, округленные до ближайших возможных согласно правилам, описанным стандарте для арифметики с плавающей точкой IEEE-754, который используется для представления чисел в js (и не только).
// Если запариться, можно вручную посчитать почему получается именно 0.30000000000000004, для этого придется углубиться в описание стандарта IEEE-754, узнать как именно 0.1 и 0.2 согласно нему представляются и сложить эти два числа.
